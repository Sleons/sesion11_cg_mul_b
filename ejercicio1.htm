<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />

<style>
body {
background-color: #ffffff;
margin: 0;
overflow: hidden;
}
</style >
</head>
<body>
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/95/three.min.js "></script >
<script>
var camera, scene, renderer;
var geometry, material, mesh;
var clock;

function cubo(x, y, z, px, py, pz, material, color, wf){
    geometry = new THREE.CubeGeometry(x, y, z);
    switch(material) {
        case 'Basic': material = new THREE.MeshBasicMaterial({color: color, wireframe: wf}); break;
        case 'Standard': material = new THREE.MeshStandardMaterial({color: color, wireframe: wf}); break;
        case 'Physical': material = new THREE.MeshPhysicalMaterial({color: color, wireframe: wf}); break;
        case 'Phong': material = new THREE.MeshPhongMaterial({color: color, wireframe: wf}); break;
        case 'Lambert': material = new THREE.MeshLambertMaterial({color: color, wireframe: wf}); break;
    }
    cube = new THREE.Mesh(geometry, material);
    scene.add(cube);
    cube.position.set(px, py, pz);
    
    return cube;
}
function init() {
    renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);
    scene = new THREE.Scene();
    var arrCube = [];
    var numcubos = 6; //Variable que nos dice el número total de cubos
    var t = 2.2;

    math = Math.PI/2

        for (var i = 0; i < numcubos; i++){
        arrCube.push(cubo(t, t, t, 0, 0, 0, 'Basic',(i<=1 ? 'red':(i<=3) ? 'blue':'yellow'),false)); //Se cogen los parametros de la función cubo y se crea un cubo en el origen
        arrCube[i].geometry.translate(i*t,i*t,0) //En x se multiplica por el número de cubos en el for, dandonos la distancia en x entre cada cubo.Tomando como referencia el tamaño de este
                                                 //Lo mismo que en la coordanada X; Sin embargo, ahora los cubos suben en vez de desplazarse horizontalmente
                                                 //La coordenada Z se mantiene intacta ya que para la escalera solo necesitamos dos ejes de coordenadas
    }

    const axesHelper = new THREE.AxesHelper( 10 );
    scene.add(axesHelper);

    camera = new THREE.PerspectiveCamera(115, window.innerWidth / window.innerHeight, 0.1, 100);
    camera.position.set( 15,  15, 15);
    camera.lookAt(arrCube[2].position);

    clock = new THREE.Clock();
    window.addEventListener('resize', onWindowResize, false);
}


function onWindowResize() {
    windowHalfX = window.innerWidth / 2;
    windowHalfY = window.innerHeight / 2;
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);

}
init();
renderer.render(scene,camera);
///animate();
</script >
</body>
</html>